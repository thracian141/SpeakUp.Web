@model IEnumerable<SpeakUp.ViewModels.WordViewModel>

@{
	ViewData["Title"] = "WordsForDeck";
	var currentDeck = ViewData["CurrentDeck"] as SpeakUp.ViewModels.DeckViewModel;
}

<style>
	.container {
		margin-top: 1rem;
	}
	.table-container {
		border: solid;
		border-color: #1e1f21;
		border-width: 5px;
		background-color: #191919;
		color: #babecc;
		border-radius: 15px;
	}

	table {
		border-collapse: separate;
		border-spacing: 0 10px; /* Adjust the vertical spacing (10px in this case) */
		width: 100%;
		margin-top: -10px !important;
	}

	tr {
		color: #babecc;
		border: none;
		text-align: center;
	}

	thead {
		font-size: 18px;
	}

	tbody {
		border: none;
	}

		tbody td {
			background-color: #242629;
			border: none;
		}

	tr:nth-child(even) td, tr:nth-child(odd) td {
		background-color: #242629;
		vertical-align: middle;
		height: 50px;
	}

		tr:nth-child(even) td:first-child, tr:nth-child(odd) td:first-child {
			border-top-left-radius: 10px;
			border-bottom-left-radius: 10px;
		}

		tr:nth-child(even) td:last-child, tr:nth-child(odd) td:last-child {
			border-top-right-radius: 10px;
			border-bottom-right-radius: 10px;
		}

	.table-link {
		color: #9f6dbc;
		text-decoration: none;
	}

		.table-link:hover {
			color: #babecc;
		}

	.progress-bar {
		margin-top: 0.3rem;
		width: 100%;
		background-color: #32373f;
		border-radius: 5px;
		height: 16px;
		position: relative;
		overflow: hidden;
		box-shadow: 0 2px 8px rgba(25, 25, 25, 0.3);
	}

	.progress-level {
		background-color: #4eb953;
		border-radius: 2px;
		height: 6px;
		width: 0;
		position: center;
		top: 0;
		left: 0;
	}

	.difficulty-bar {
		display:flexbox;
		flex-direction: column; /* Keep the original column layout */
		transform: scaleY(-1);
		position: absolute; /* Add this line */
		bottom:0;
		left:42%;
		background-color: #32373f;
		justify-content:center;
		height:82%;
		overflow:hidden;
		width:26px;
		margin-bottom:5px;
		border-radius:4px;
		box-shadow: 0 2px 8px rgba(25, 25, 25, 0.3);
	}

	.difficulty-level {
		position: relative; /* Position absolutely within the difficulty-bar */
		left:10%;
		background-color: #4eabb9;
		height: 3px;
		width: 20px;
		margin-top:1px;
		border-radius:2px;
		box-shadow: 0 2px 8px rgba(25, 25, 25, 0.3);
	}
</style>
<body>
<div class="table-container" style="margin-top: 32px;">
	<div style="display: flex; justify-content: space-between; align-items: center; margin-left:1rem; margin-bottom:0">
		<p style="font-size:30px; margin-bottom:0">@currentDeck.DeckName</p>
		<a class="table-link" style="font-size:20px; margin-right:1rem;" asp-action="CreateForDeck" asp-route-deckId="@currentDeck.Id">Add word</a>
	</div>
	<div style="display: flex; align-items: center; margin-left:0">
		<input style="flex:1; margin-bottom:2rem; margin-right: 1rem; margin-left:1rem" type="text" class="search-bar" placeholder="Search..." />
	</div>
	<table class="table">
		<thead>
			<tr>
				<th>Front</th>
				<th>Back</th>
				<th>Description</th>
				<th>Level</th>
				<th>Difficulty</th>
				<th>Date added</th>
				<th>Last reviewed</th>
				<th>Due date</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model)
			{
				<tr class="data-row">
					<td>@Html.DisplayFor(modelItem => item.Front)</td>
					<td>@Html.DisplayFor(modelItem => item.Back)</td>
					<td style="color:#868eac;">@Html.DisplayFor(modelItem => item.Description)</td>
					<td>
						<div class="progress-bar">
							<div class="progress-level" style="width: @item.Level%"></div>
						</div>
					</td>
					<td style="display:flexbox; flex-flow:column-reverse; position:relative;">
						@if (item.Difficulty == 0)
						{
							<div class="difficulty-bar">
								<div style="background-color:#32373f;" class="difficulty-level"></div>
							</div>
						}
						<div class="difficulty-bar">
							@for (int i = 0; i < item.Difficulty; i++)
							{
								<div class="difficulty-level"></div>
							}
						</div>
					</td>
					<td>@Html.DisplayFor(modelItem => item.DateAdded)</td>
					@if (item.LastReviewDate < item.DateAdded)
					{
						<td>-</td>
					}
					else
					{
						<td>
							<div style="margin:0;" class="last-reviewed-time" data-last-reviewed="@item.LastReviewDate"></div>
						</td>
					}
					<td>
						@Html.DisplayFor(modelItem => item.NextReviewDate)
					</td>
					<td>
						@Html.ActionLink("Edit", "Edit", new { id=item.Id }, new { @class = "table-link" }) |
						@Html.ActionLink("Delete", "Delete", new { id=item.Id }, new { @class = "table-link" })
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>
</body>

@section Scripts {
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const rows = document.querySelectorAll(".data-row");
			const borderRadius = "10px"; // Adjust the border radius as needed

			rows.forEach(row => {
				row.style.borderRadius = borderRadius;
			});
		});
	</script>
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const rows = document.querySelectorAll(".data-row");
			const borderRadius = "10px"; // Adjust the border radius as needed

			rows.forEach(row => {
				row.style.borderRadius = borderRadius;
			});

			const lastReviewedSpans = document.querySelectorAll(".last-reviewed-time");

			lastReviewedSpans.forEach(span => {
				const lastReviewed = new Date(span.dataset.lastReviewed);
				const addedDate = new Date(span.dataset.addedDate);

				if (lastReviewed >= addedDate) {
					const currentTime = new Date();
					const timeDiff = currentTime - lastReviewed;
					const hoursDiff = Math.floor(timeDiff / (1000 * 60 * 60));

					span.textContent = `${hoursDiff} hours ago`;
				}
			});
		});
	</script>
}

