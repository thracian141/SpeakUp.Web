@using SpeakUp.Utilities;
@model List<SpeakUp.ViewModels.DeckViewModel>;
@{
	var userId = ViewBag.CurrentUserId;
	var decks = ViewBag.Decks as List<SpeakUp.ViewModels.DeckViewModel>;
	var courses = ViewBag.Courses as List<SpeakUp.ViewModels.DeckViewModel>;
}

<style>
	th {
		color: white;
	}

	td {
		color: white;
	}

	.course-block {
		width: 360px;
		height: 240px;
		background-color: #242629;
		background-repeat: no-repeat;
		border-radius: 15px;
		position: relative;
		display: flex;
		justify-content: center;
		align-items: flex-end;
		margin-right: 20px;
		background-size: 360px;
	}

	.courses-container {
		display: flex;
		flex-flow: wrap;
		margin: 2rem;
		width: stretch;
		height:stretch;
		overflow:auto;
	}

		.courses-container::-webkit-scrollbar {
			width: 0.7rem; /* Width of the scrollbar */
		}

		.courses-container::-webkit-scrollbar-thumb {
			background-color: #1e1f21; /* Color of the scrollbar thumb */
			border-radius: 6px; /* Border radius of the thumb */
		}

		.courses-container::-webkit-scrollbar-track {
			background-color: #191919; /* Color of the scrollbar track */
			margin-left: 10px;
		}

	.course-block-options {
		position: absolute;
		left: 5%;
		bottom: 9%;
		opacity: 0; /* Initially set opacity to 0 */
		transition: opacity 0.3s;
	}

		.course-block-options img {
			width: 20%;
			height: auto;
		}

	.course-block:hover .course-block-options {
		opacity: 1;
	}

	.course-block-text {
		color: #b6bac8;
		font-family: Ebrima;
		font-weight: normal;
		font-size: 24px;
		position: absolute;
		bottom: 1%;
	}

	.deck-wrapper {
		position: relative;
		z-index: 1;
	}

		.deck-wrapper:hover {
			z-index: 100;
		}

	.course-block:hover {
		z-index: 100;
	}

	.dropdown-menu {
		position: absolute;
		bottom:100%;
		background-color: #1e1f21;
		border-radius: 5px;
		padding: 5px;
		min-width: 100px;
		opacity: 0;
		pointer-events: none;
		z-index: 1000;
	}

	.course-block:hover .dropdown-menu {
		opacity: 1;
		pointer-events: auto;
	}

	.dropdown-menu a {
		color: #878eab;
		display: block;
		text-decoration: none;
		padding: 5px;
		border-radius: 5px;
	}

		.dropdown-menu a:hover {
			background-color: #212325;
		}

	.item-description {
		color: #7b829d;
		overflow-wrap: break-word;
		position: absolute;
		top: 5%;
		left: 50%;
		transform: translate(-50%, 0);
	}

	.add-deck-button {
		color: #9f6dbc;
		text-decoration: none;
		margin: 2rem;
		margin-bottom: 0;
		margin-top: 1rem;
		font-size: 20px;
	}

		.add-deck-button:hover {
			color: #babecc;
		}

	.decks-courses-wrapper {
		display: flex;
		flex-direction: column;
		background-color: #191919;
		border-radius: 10px;
		height: 50rem;
		margin-top: 3rem;
		position: relative;
		z-index: 2;
	}

</style>

<body>
	<div class="decks-courses-wrapper">
		<a class="add-deck-button" asp-controller="Decks" asp-action="Create">Create Deck</a>
		<input type="text" class="search-bar" id="searchInput" placeholder="Search..." />
		<div class="courses-container">
			@foreach (var item in Model) {
				if (item.UserId == userId && item.IsCourse) // Courses, Admin only
				{
					<div class="deck-wrapper course-filter" data-course-name="@item.DeckName" style="cursor: pointer; margin-bottom:1.2rem;" onclick="navigateToGrammarsForDeck('@item.Id')">
						<div class="course-block" style="background-image:url('deckimages/@item.DeckImage');">
							<p class="course-block-text">@item.DeckName</p>
							<div class="course-block-options">
								<img src="~/images/gearicon.png" />
								<div class="dropdown-menu">
									@if (User.IsInRole(WebSiteRole.WebSite_Admin) || User.IsInRole(WebSiteRole.WebSite_Dev)) {
										<a asp-controller="Decks" asp-action="Edit" asp-route-id="@item.Id">Edit</a>
										<a asp-action="NullLevels" asp-route-id="@item.Id">Null Levels</a>
									}
									<a asp-controller="Decks" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
								</div>
							</div>
						</div>
					</div>
				} else if (item.UserId == userId && !item.IsCourse) // Decks
						{
					<div class="deck-wrapper course-filter" data-course-name="@item.DeckName" style="cursor: pointer; margin-bottom:1.2rem;" onclick="navigateToWordsForDeck('@item.Id')">
						<div class="course-block" style="width:250px; height: 150px;">
							<div class="item-description">
								@item.DeckDescription;
							</div>
							<p class="course-block-text">@item.DeckName</p>
							<div class="course-block-options">
								<img src="~/images/gearicon.png" />
								<div class="dropdown-menu">
									<a asp-controller="Decks" asp-action="Edit" asp-route-id="@item.Id">Edit</a>
									<a asp-controller="Decks" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
								</div>
							</div>
						</div>
					</div>
				}
			}
		</div>
	</div>
</body>

<script>
	const courseBlockOptions = document.querySelectorAll(".course-block-options");

	function toggleDropdown(dropdownMenu) {
		dropdownMenu.classList.toggle("show");
	}

	function closeDropdown(dropdownMenu) {
		dropdownMenu.classList.remove("show");
	}

	courseBlockOptions.forEach((optionsDiv) => {
		const imgElement = optionsDiv.querySelector("img");
		const dropdownMenu = optionsDiv.querySelector(".dropdown-menu");

		imgElement.addEventListener("click", (event) => {
			event.stopPropagation();
			toggleDropdown(dropdownMenu);
		});

		optionsDiv.addEventListener("mouseleave", () => {
			closeDropdown(dropdownMenu);
		});

		dropdownMenu.addEventListener("mouseleave", () => {
			closeDropdown(dropdownMenu);
		});
	});

	document.body.addEventListener("click", () => {
		const openDropdown = document.querySelector(".dropdown-menu.show");
		if (openDropdown) {
			closeDropdown(openDropdown);
		}
	});
</script>
<script>
	function navigateToWordsForDeck(deckId) {
		window.location.href = '@Url.Action("WordsForDeck", "Words")' + '?deckId=' + deckId;
	}
</script>
<script>
	function navigateToGrammarsForDeck(deckId) {
		window.location.href = '@Url.Action("GrammarsForDeck", "Grammar")' + '?deckId=' + deckId;
	}
</script>

<script>
	const searchInput = document.getElementById('searchInput');
	const courseFilters = document.querySelectorAll('.course-filter');

	searchInput.addEventListener('input', () => {
		const searchText = searchInput.value.toLowerCase();

		courseFilters.forEach(courseFilter => {
			const courseName = courseFilter.getAttribute('data-course-name').toLowerCase();
			const isVisible = courseName.includes(searchText);
			courseFilter.style.display = isVisible ? 'block' : 'none';
		});
	});
</script>